{"id":"qccL","dependencies":[{"name":"/Users/neo/Workspace/2022/vymo-source-restful/package.json","includedInParent":true,"mtime":1650639339889},{"name":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/package.json","includedInParent":true,"mtime":1650476598123},{"name":"../jsutils/inspect.mjs","loc":{"line":1,"column":24,"index":24},"parent":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/type/scalars.mjs","resolved":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/jsutils/inspect.mjs"},{"name":"../jsutils/isObjectLike.mjs","loc":{"line":2,"column":29,"index":79},"parent":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/type/scalars.mjs","resolved":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/jsutils/isObjectLike.mjs"},{"name":"../error/GraphQLError.mjs","loc":{"line":3,"column":29,"index":139},"parent":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/type/scalars.mjs","resolved":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/error/GraphQLError.mjs"},{"name":"../language/kinds.mjs","loc":{"line":4,"column":21,"index":189},"parent":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/type/scalars.mjs","resolved":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/language/kinds.mjs"},{"name":"../language/printer.mjs","loc":{"line":5,"column":22,"index":236},"parent":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/type/scalars.mjs","resolved":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/language/printer.mjs"},{"name":"./definition.mjs","loc":{"line":6,"column":34,"index":297},"parent":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/type/scalars.mjs","resolved":"/Users/neo/Workspace/2022/vymo-source-restful/node_modules/graphql/type/definition.mjs"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.GraphQLString=exports.GraphQLInt=exports.GraphQLID=exports.GraphQLFloat=exports.GraphQLBoolean=exports.GRAPHQL_MIN_INT=exports.GRAPHQL_MAX_INT=void 0,exports.isSpecifiedScalarType=v,exports.specifiedScalarTypes=void 0;var e=require(\"../jsutils/inspect.mjs\"),r=require(\"../jsutils/isObjectLike.mjs\"),n=require(\"../error/GraphQLError.mjs\"),t=require(\"../language/kinds.mjs\"),a=require(\"../language/printer.mjs\"),o=require(\"./definition.mjs\"),i=2147483647;exports.GRAPHQL_MAX_INT=i;var p=-2147483648;exports.GRAPHQL_MIN_INT=p;var s=new o.GraphQLScalarType({name:\"Int\",description:\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\",serialize:function(r){var t=d(r);if(\"boolean\"==typeof t)return t?1:0;var a=t;if(\"string\"==typeof t&&\"\"!==t&&(a=Number(t)),\"number\"!=typeof a||!Number.isInteger(a))throw new n.GraphQLError(\"Int cannot represent non-integer value: \".concat((0,e.inspect)(t)));if(a>i||a<p)throw new n.GraphQLError(\"Int cannot represent non 32-bit signed integer value: \"+(0,e.inspect)(t));return a},parseValue:function(r){if(\"number\"!=typeof r||!Number.isInteger(r))throw new n.GraphQLError(\"Int cannot represent non-integer value: \".concat((0,e.inspect)(r)));if(r>i||r<p)throw new n.GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(r));return r},parseLiteral:function(e){if(e.kind!==t.Kind.INT)throw new n.GraphQLError(\"Int cannot represent non-integer value: \".concat((0,a.print)(e)),e);var r=parseInt(e.value,10);if(r>i||r<p)throw new n.GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(e.value),e);return r}});exports.GraphQLInt=s;var c=new o.GraphQLScalarType({name:\"Float\",description:\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).\",serialize:function(r){var t=d(r);if(\"boolean\"==typeof t)return t?1:0;var a=t;if(\"string\"==typeof t&&\"\"!==t&&(a=Number(t)),\"number\"!=typeof a||!Number.isFinite(a))throw new n.GraphQLError(\"Float cannot represent non numeric value: \".concat((0,e.inspect)(t)));return a},parseValue:function(r){if(\"number\"!=typeof r||!Number.isFinite(r))throw new n.GraphQLError(\"Float cannot represent non numeric value: \".concat((0,e.inspect)(r)));return r},parseLiteral:function(e){if(e.kind!==t.Kind.FLOAT&&e.kind!==t.Kind.INT)throw new n.GraphQLError(\"Float cannot represent non numeric value: \".concat((0,a.print)(e)),e);return parseFloat(e.value)}});exports.GraphQLFloat=c;var u=new o.GraphQLScalarType({name:\"String\",description:\"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\",serialize:function(r){var t=d(r);if(\"string\"==typeof t)return t;if(\"boolean\"==typeof t)return t?\"true\":\"false\";if(\"number\"==typeof t&&Number.isFinite(t))return t.toString();throw new n.GraphQLError(\"String cannot represent value: \".concat((0,e.inspect)(r)))},parseValue:function(r){if(\"string\"!=typeof r)throw new n.GraphQLError(\"String cannot represent a non string value: \".concat((0,e.inspect)(r)));return r},parseLiteral:function(e){if(e.kind!==t.Kind.STRING)throw new n.GraphQLError(\"String cannot represent a non string value: \".concat((0,a.print)(e)),e);return e.value}});exports.GraphQLString=u;var l=new o.GraphQLScalarType({name:\"Boolean\",description:\"The `Boolean` scalar type represents `true` or `false`.\",serialize:function(r){var t=d(r);if(\"boolean\"==typeof t)return t;if(Number.isFinite(t))return 0!==t;throw new n.GraphQLError(\"Boolean cannot represent a non boolean value: \".concat((0,e.inspect)(t)))},parseValue:function(r){if(\"boolean\"!=typeof r)throw new n.GraphQLError(\"Boolean cannot represent a non boolean value: \".concat((0,e.inspect)(r)));return r},parseLiteral:function(e){if(e.kind!==t.Kind.BOOLEAN)throw new n.GraphQLError(\"Boolean cannot represent a non boolean value: \".concat((0,a.print)(e)),e);return e.value}});exports.GraphQLBoolean=l;var f=new o.GraphQLScalarType({name:\"ID\",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',serialize:function(r){var t=d(r);if(\"string\"==typeof t)return t;if(Number.isInteger(t))return String(t);throw new n.GraphQLError(\"ID cannot represent value: \".concat((0,e.inspect)(r)))},parseValue:function(r){if(\"string\"==typeof r)return r;if(\"number\"==typeof r&&Number.isInteger(r))return r.toString();throw new n.GraphQLError(\"ID cannot represent value: \".concat((0,e.inspect)(r)))},parseLiteral:function(e){if(e.kind!==t.Kind.STRING&&e.kind!==t.Kind.INT)throw new n.GraphQLError(\"ID cannot represent a non-string and non-integer value: \"+(0,a.print)(e),e);return e.value}});exports.GraphQLID=f;var h=Object.freeze([u,s,c,l,f]);function v(e){return h.some(function(r){var n=r.name;return e.name===n})}function d(e){if((0,r.isObjectLike)(e)){if(\"function\"==typeof e.valueOf){var n=e.valueOf();if(!(0,r.isObjectLike)(n))return n}if(\"function\"==typeof e.toJSON)return e.toJSON()}return e}exports.specifiedScalarTypes=h;"},"sourceMaps":null,"error":null,"hash":"038a1b628d03da7fe249447768c39c6c","cacheData":{"env":{}}}